#
# class master::common::puppet
# ============================
#
# Performs a (nearly) complete configuration of the puppet client or a
# puppetmaster.
#
# Obviously, a baseline install must happen before this will ever take
# effect, but this will complete the configuration and set up
# Apache+Passenger for future runs if the site is enabled.
#
# For a basic Passenger setup (without load balancer), add:
#
#     master::service::apache::sites:
#       - 'puppetmaster'
#
# For a fully load-balanced configuration, add:
#
#     master::service::apache::sites:
#       - '30_puppetmaster_frontend_8140'
#       - '40_puppetmaster_worker_18138'
#       - '40_puppetmaster_worker_18139'
#       - '40_puppetmaster_worker_18140'
#       - '40_puppetmaster_worker_18141'
#       - '40_puppetmaster_worker_18142'
#
# WARNING: the load-balanced configuration requires that you remove
# certificate checking from /etc/puppet/auth.conf by adding:
#
#     auth any
#
# under each of:
#
#     path ~ ^/catalog/([^/]+)$
#     path ~ ^/node/([^/]+)$
#     path /certificate_revocation_list/ca
#     path ~ ^/report/([^/]+)$
#     path /file
#
# *** This has substantial security concerns. ***
#
#
# Certificate Generation
# ----------------------
# The one thing this does not handle is generation of puppet CA
# certificates.  The ones autogenerated during puppet installs will
# work fine if there is only one puppetmaster.  If there are multiple
# puppetmasters, either for redundancy, scaling, or development, you
# will need to generate a common CA environment with:
#
#     puppet cert generate <canonical certname> --dns_alt_names=<comma-separated list of DNS names>
#
# This will generate the following public files (mode 0644) in
# /var/lib/puppet/ssl:
#   ca/ca_crt.pem
#   ca/ca_pub.pem
#   ca/signed/<canonicalname>.pem
#   certs/ca.pem
#   certs/<canonicalname>.pem
#   public_keys/<canonicalname>.pem
#
# and the following private files (puppet.puppet 0640):
#   ca/ca_key.pem
#   ca/private/ca.pass
#   private_keys/<canonicalname>.pem
#
# Those files will need to be manually synchronized to any matching
# puppetmaster.
#
#
# Non-Daemon Configuration
# ------------------------
#
# If you want a workflow where all runs are performed client-side, you
# can set the following to make 'puppet agent -v' behave very closely
# to 'puppet agent -t':
#
#     master::common::puppet::daemonize: false
#     master::common::puppet::ignorecache: true
#     master::common::puppet::onetime: true
#     master::common::puppet::show_diff: true
#     master::common::puppet::usecacheonfailure: false
#
#
# Unicode diff bug
# ----------------
#
# Some systems (most notably SLES12) may crash out when trying to
# display diffs involving invalid Unicode data.  Set show_diff to be
# false on these systems and force a onetime run to correct the
# invalid files.
#

class master::common::puppet (
    # Parameters
    # ----------
    #
    # ### hiera_datadir
    # Hiera datadir string
    #
    # Note that there is NO INTERPOLATION in this string in puppet!
    # The single quotes are intentional.
    #
    # The presence of YAML interpolation in this string also makes it
    # difficult to specify in hiera.  You will need to escape it as:
    #   '/srv/puppet/env/%%{::}{::environment}/hieradata'
    $hiera_datadir = '/srv/puppet/env/%{::environment}/hieradata',

    # ### is_puppetmaster
    # Is this node itself a puppetmaster?
    $is_puppetmaster = false,

    # ### basemodulepath
    # Global module path used in all environments
    $basemodulepath = undef,

    # ### ca_name
    # Override the name used for generated CAs
    $ca_name = undef,

    # ### ca_ttl
    # How long before generated certificates expire
    #
    # Append 'y' to a number for years
    $ca_ttl = '5y',

    # ### codedir
    # Puppet 4.x base directory for code
    $codedir = undef,

    # ### daemonize
    #
    # Whether to send the puppet process into the background by
    # default.
    #
    # This defaults to true on POSIX systems, and to false on
    # Windows (where Puppet currently cannot daemonize
    $daemonize = undef,

    # ### ssldir
    # SSL certificate directory
    $ssldir = '/var/lib/puppet/ssl',

    # ### environmentpath
    # Base directory where environments are found
    $environmentpath = '/srv/puppet/env',

    # ### environmentowner
    # User that owns the production environment
    $environmentowner = 'root',

    # ### ignorecache
    # Always ignore cache and recompile the configuration by default
    $ignorecache = false,

    # ### onetime
    # Run the puppet agent once, rather than as a long-running daemon,
    # making puppet runs interactive by default
    $onetime = false,

    # ### parser
    # Which parser to use
    #
    # Normally this will only be used to set parser: 'future'
    $parser = undef,

    # ### pmirror_home
    # Home directory for the pmirror account used for automatic
    # mirroring between puppetmasters
    $pmirror_home = '/srv/puppet/mirror',

    # ### puppetlabs_modules
    # If this node is a puppetmaster, install the following
    # prepackaged Puppetlabs modules
    #
    # Available modules will vary by OS and extra repositories enabled.
    $puppetlabs_modules = [ 'stdlib' ],

    # ### puppetmaster_allowfrom
    # If this node is a puppetmaster, from which IPs will it allow access?
    $puppetmaster_allowfrom = [ '127.0.0.1', ],

    # ### puppetmaster_certadmins
    # Array of usernames to be granted sudo access to:
    #
    #     puppet cert *
    #     puppet ca *
    #     systemctl reload apache2/httpd
    #
    # commands so that they can sign certificates for new machines and
    # refresh bad caches
    $puppetmaster_certadmins = false,

    # ### puppetmaster_certificate_file
    # ### puppetmaster_certificate_key_file
    # ### puppetmaster_certificate_chain_file
    # ### puppetmaster_ca_certificate_file
    # ### puppetmaster_ca_revocation_file
    # SSL certificate file settings for puppetmasters
    #
    # These will have the appropriate directory prepended as needed
    $puppetmaster_certificate_file       = "${::fqdn}.pem",
    $puppetmaster_certificate_key_file   = "${::fqdn}.pem",
    $puppetmaster_certificate_chain_file = 'ca_crt.pem',
    $puppetmaster_ca_certificate_file    = 'ca_crt.pem',
    $puppetmaster_ca_revocation_file     = 'ca_crl.pem',

    # ### puppetmaster_environments
    # If this node is a puppetmaster, what environments do we set up in
    # addition to [master]?
    $puppetmaster_environments = [ ],

    # ### puppetnamespace_allow
    # What hosts to allow access to puppetmaster namespaces
    $puppetnamespace_allow = [ "*.${::domain}", ],

    # ### puppetenvironment
    # Default environment when puppet is run on the client
    $puppetenvironment = undef,

    # ### puppetprerun
    # ### puppetpostrun
    # Scripts to run before/after Puppet runs
    $puppetprerun = '/etc/puppet/etckeeper-commit-pre',
    $puppetpostrun = '/usr/local/bin/puppet-postrun',

    # ### puppetserver
    # What is the name of the default puppet server?  This must match
    # the certificate on the machine.
    $puppetserver = "puppet.${::domain}",

    # ### puppetservice
    # Should the Puppet service be started? (true/false)
    #
    # If true, Puppet will always make a run when the machine is rebooted
    $puppetservice = true,

    # ### reports
    #
    # The list of report handlers to use on a puppet server. When
    # using multiple report handlers, their names should be
    # comma-separated, with whitespace allowed. (For example, reports
    # = http, store.)
    #
    # To completely disable reports being stored on the puppet server,
    # set this to 'none'.
    $reports = undef,

    # ### reports_days
    # How many days of reports to store on puppetmasters
    #
    # Set to false to never prune old reports
    $reports_days = 30,

    # ### passengermaxpoolsize
    # ### passengermemorylimit
    # ### passengermininstances
    # ### passengerpoolidletime
    # ### passengerstatthrottlerate
    # Passenger tuning
    #
    # We start more aggressive than default
    $passengermaxpoolsize = 20,
    $passengermemorylimit = false,
    $passengermininstances = 2,
    $passengerpoolidletime = 1800,
    $passengerstatthrottlerate = 120,

    # ### show_diff
    # Whether to log and report a contextual diff by default when
    # files are being replaced.
    $show_diff = false,

    # ### stringify_facts
    # Whether or not to force facts to be strings.
    # This defaults to true in Puppet 3 and false in 4+, where this
    # setting is not valid at all.
    $stringify_facts = undef,

    # ### usecacheonfailure
    # Whether to use the cached configuration when the remote
    # configuration will not compile
    $usecacheonfailure = true,
)
{
    # Code
    # ----
    include master::common::etckeeper
    include master::common::ruby
    include master::common::sudo

    package { 'puppet': ensure => installed, }

    File { require => Package['puppet'] }
    file { '/etc/puppet': ensure => directory,
        owner => root, group => root, mode => '0755',
    }

    # The logrotate.d entry for a puppetmaster collides with the
    # standard puppet logrotate.d entry and breaks all log rotation, but
    # the puppet logrotate.d entry will rotate all puppet and
    # puppetmaster logs anyway, so just ensure that the puppetmaster
    # file never exists.
    file { '/etc/logrotate.d/puppetmaster': ensure => absent, }

    # Files where the owner and group are undef should likely have
    # those files owned by puppet.puppet, but that user/group is not
    # necessarily available on all systems (SLES12 most notably) if a
    # puppetmaster is not running.

    file { '/var/lib/puppet': ensure => directory,
        owner => undef, group => undef, mode => '2755',
        require => Package['puppet'],
    }
    file { '/var/lib/puppet/clientbucket': ensure => directory,
        owner => root, group => root, mode => '0750',
    }
    file { '/var/lib/puppet/client_yaml': ensure => directory,
        owner => undef, group => undef, mode => '0750',
    }
    file { '/var/lib/puppet/facts': ensure => directory,
        owner => undef, group => undef, mode => '2750',
    }
    file { '/var/lib/puppet/lib': ensure => directory,
        owner => root, group => root,
    }
    file { '/var/lib/puppet/lib/facter': ensure => directory,
        owner => root, group => root,
    }
    file { '/var/lib/puppet/lib/puppet': ensure => directory,
        owner => root, group => root,
    }
    file { '/var/lib/puppet/ssl': ensure => directory,
        owner => undef, group => undef, mode => '0771',
    }
    file { '/var/lib/puppet/ssl/ca': ensure => directory,
        owner => undef, group => undef, mode => '0755',
    }
    file { '/var/lib/puppet/ssl/ca/private': ensure => directory,
        owner => undef, group => undef, mode => '0750',
    }
    file { '/var/lib/puppet/ssl/ca/signed': ensure => directory,
        owner => undef, group => undef, mode => '0755',
    }
    file { '/var/lib/puppet/ssl/certs': ensure => directory,
        owner => undef, group => undef, mode => '0755',
    }
    file { '/var/lib/puppet/state': ensure => directory,
        owner => undef, group => undef, mode => '1755',
    }

    templatelayer { '/etc/puppet/puppet.conf':
        require => File['/usr/local/bin/puppet-postrun'],
    }
    templatelayer { '/etc/puppet/etckeeper-commit-post': mode => '0755' }
    templatelayer { '/etc/puppet/etckeeper-commit-pre': mode => '0755' }
    templatelayer { '/etc/default/puppet': }

    # Script to run 'puppetd -t' with no additional arguments from sudo
    templatelayer { '/usr/local/sbin/puppetupdate':
        owner => root, group => root, mode => '0755'
    }

    if $is_puppetmaster {
        include master::service::apache

        if versioncmp($::puppetversion, '4.0') < 0 {
            $rackdir = '/usr/share/puppet/rack/puppetmasterd'
        }
        else {
            $rackdir = '/usr/share/puppet/rack/puppet-master'
        }

        $puppetlabs_package_prefix = $::osfamily ? {
            'Debian' => 'puppet-module-puppetlabs-',
            'RedHat' => 'puppetlabs-',
        }
        $puppetlabs_modules_packages = prefix($puppetlabs_modules,$puppetlabs_package_prefix)
        package { $puppetlabs_modules_packages: }
        case $::osfamily {
            'Debian': {
                if versioncmp($::puppetversion, '4.0') < 0 {
                    package { 'puppetmaster-passenger': }
                }
                else {
                    package { 'puppet-master-passenger':
                        alias => 'puppetmaster-passenger',
                    }
                }
                package { 'puppet-lint': }
                templatelayer { '/etc/default/puppetmaster': }
            }
            'RedHat': {
                package { 'rubygem-puppet-lint': }
            }
            default: { }
        }

        templatelayer { '/etc/puppet/hiera.yaml': }
        file { '/etc/hiera.yaml':
            ensure => link,
            target => 'puppet/hiera.yaml',
        }
        # namespaceauth.conf is an obsolete relic from Puppet 2.x
        file { '/etc/puppet/namespaceauth.conf': ensure => absent }

        # /etc/puppet/{manifests,modules} are obsolete relics
        file { '/etc/puppet/manifests': ensure  => absent }
        file { '/etc/puppet/modules': ensure  => absent }

        if $codedir {
            file { $codedir: ensure => directory,
                owner => $environmentowner, group => puppet, mode => '2750',
            }
        }
        file { $environmentpath: ensure => directory,
            owner => $environmentowner, group => puppet, mode => '2750',
        }
        file { "${environmentpath}/production": ensure => directory,
            owner => $environmentowner, group => puppet, mode => '2750',
        }
        file { "${environmentpath}/production/manifests": ensure => directory,
            owner => $environmentowner, group => puppet, mode => '2750',
        }
        file { "${environmentpath}/production/modules": ensure => directory,
            owner => $environmentowner, group => puppet, mode => '2750',
        }
        file { '/var/lib/puppet/manifests': ensure => 'env/production/manifests' }
        file { "${environmentpath}/production/manifests/site.pp":
            ensure => present,
            owner => $environmentowner, group => puppet, mode => '0640',
        }
        file { $pmirror_home: ensure => directory,
            owner => pmirror, group => puppet, mode => '2750',
            require => User['pmirror'],
        }
        file { '/var/lib/puppet/modules': ensure => 'env/production/modules' }

        file { '/usr/local/bin/hg-puppettest':
            owner => root, group => root, mode => '0555',
            source => 'puppet:///modules/master/usr/local/bin/hg-puppettest'
        }
        file { '/var/lib/puppet/bucket': ensure => directory,
            owner => puppet, group => puppet, mode => '2750',
        }
        file { '/var/lib/puppet/nodefiles': ensure => directory,
            owner => puppet, group => puppet, mode => '2750',
        }

        # Apache+Passenger configuration without load-balancer
        templatelayer { '/etc/apache2/sites-available/puppetmaster.conf':
            require => Class['master::service::apache::dirs'],
        }

        # Apache load-balancer configuration
        templatelayer { [ '/etc/apache2/sites-available/30_puppetmaster_frontend_8140.conf',
                          '/etc/apache2/sites-available/40_puppetmaster_worker_18138.conf',
                          '/etc/apache2/sites-available/40_puppetmaster_worker_18139.conf',
                          '/etc/apache2/sites-available/40_puppetmaster_worker_18140.conf',
                          '/etc/apache2/sites-available/40_puppetmaster_worker_18141.conf',
                          '/etc/apache2/sites-available/40_puppetmaster_worker_18142.conf',
                          ]:
            require => Class['master::service::apache::dirs'],
        }

        # Rack configuration and temporary file areas for the Passenger load
        # balancer
        #
        file { [ '/usr/local/share/puppet',
                 '/usr/local/share/puppet/rack',
                 '/usr/local/share/puppet/rack/puppetmasterd',
                 '/usr/local/share/puppet/rack/puppetmasterd/public',
                 '/usr/local/share/puppet/rack/puppetmasterd/tmp',
                 ]: ensure => directory,
            owner => root, group => puppet, mode => '2755',
        }
        # On Debian, the puppetmaster-passenger package will provide
        # this (and the needed directories) in ${rackdir}, but on
        # other operating systems you can't guarantee this will be
        # available, so we build it in /usr/local
        #
        templatelayer { '/usr/local/share/puppet/rack/puppetmasterd/config.ru': }

        # These might be replaceable with symlinks, but for now, it's
        # simpler to generate straight copies to be sure:
        exec { 'init-puppetmasterd-rack-18138':
            path => '/sbin:/usr/sbin:/bin:/usr/bin',
            command => "cp -a ${rackdir} /usr/local/share/puppet/rack/puppetmasterd_18138",
            require => [ Package['puppetmaster-passenger'],
                         File['/usr/local/share/puppet/rack'],
                         ],
            onlyif => "test -d ${rackdir}",
            unless => 'test -d /usr/local/share/puppet/rack/puppetmasterd_18138',
        }
        exec { 'init-puppetmasterd-rack-18139':
            path => '/sbin:/usr/sbin:/bin:/usr/bin',
            command => "cp -a ${rackdir} /usr/local/share/puppet/rack/puppetmasterd_18139",
            require => [ Package['puppetmaster-passenger'],
                         File['/usr/local/share/puppet/rack'],
                         ],
            onlyif => "test -d ${rackdir}",
            unless => 'test -d /usr/local/share/puppet/rack/puppetmasterd_18139',
        }
        exec { 'init-puppetmasterd-rack-18140':
            path => '/sbin:/usr/sbin:/bin:/usr/bin',
            command => "cp -a ${rackdir} /usr/local/share/puppet/rack/puppetmasterd_18140",
            require => [ Package['puppetmaster-passenger'],
                         File['/usr/local/share/puppet/rack'],
                         ],
            onlyif => "test -d ${rackdir}",
            unless => 'test -d /usr/local/share/puppet/rack/puppetmasterd_18140',
        }
        exec { 'init-puppetmasterd-rack-18141':
            path => '/sbin:/usr/sbin:/bin:/usr/bin',
            command => "cp -a ${rackdir} /usr/local/share/puppet/rack/puppetmasterd_18141",
            require => [ Package['puppetmaster-passenger'],
                         File['/usr/local/share/puppet/rack'],
                         ],
            onlyif => "test -d ${rackdir}",
            unless => 'test -d /usr/local/share/puppet/rack/puppetmasterd_18141',
        }
        exec { 'init-puppetmasterd-rack-18142':
            path => '/sbin:/usr/sbin:/bin:/usr/bin',
            command => "cp -a ${rackdir} /usr/local/share/puppet/rack/puppetmasterd_18142",
            require => [ Package['puppetmaster-passenger'],
                         File['/usr/local/share/puppet/rack'],
                         ],
            onlyif => "test -d ${rackdir}",
            unless => 'test -d /usr/local/share/puppet/rack/puppetmasterd_18142',
        }

        # On puppetmasters, user puppet needs a real shell to allow for
        # version control clones and pulls to puppet repositories
        #
        user { 'puppet': ensure => present,
            provider => useradd,
            gid => 'puppet',
            comment => "Puppet configuration management daemon,,,",
            home => '/var/lib/puppet',
            managehome => false,
            password => '*',
            shell => '/bin/bash',
            system => true,
            require => [ Package['puppet'],
                         File['/var/lib/puppet'],
                         ],
        }

        # Set up the pmirror user needed for mirroring repositories from
        # another puppetmaster
        #
        user { 'pmirror': ensure => present,
            gid => 'puppet',
            home => $pmirror_home,
            managehome => true,
            password => '*',
            shell => '/bin/bash',
            system => true,
            require => Package['puppet'],
        }
        file { "${pmirror_home}/.ssh": ensure => directory,
            owner => pmirror, group => puppet, mode => '0700',
            require => User['pmirror'],
        }

        # Handle cert administrators
        if $puppetmaster_certadmins {
            master::sudo_rule { 'puppet_certadmins': }
        }
        else {
            file { '/etc/sudoers.d/puppet_certadmins': ensure => absent }
        }

        # Clean up stored reports
        if $reports_days {
            templatelayer { '/etc/cron.daily/puppet_clean_reports':
                mode => '0555',
            }
        }
        else {
            file { '/etc/cron.daily/puppet_clean_reports': ensure => absent }
        }

        # Create user environment directories and add those users to the puppet group
        # This is only relevant for v2.x Puppetmasters
        if $puppetmaster_environments {
            master::common::puppet::userenv { $puppetmaster_environments: }
        }
        $puppetgroupmembers = inline_template('<%= @puppetmaster_environments.join(",") %>')
        groupmembers { 'puppet': members => $puppetgroupmembers }
    }

    if $puppetservice {
        service { 'puppet':
            ensure => running,
            enable => true,
        }
    }
    else {
        service { 'puppet':
            ensure => stopped,
            enable => false,
        }
    }

    # Touch a file that shows that puppet has been run.
    #
    # This file will be used by system monitoring to determine the last
    # time puppet was run.  Normally this would be handled by watching
    # puppet's state.yaml file, however the state.yaml file is updated
    # even during a --noop run.
    #
    exec { 'stamp-puppet-last-run':
        command => "date +%Y%m%d%H%M%S > ${::puppetvardir}/state/puppet.last_run",
        path => '/usr/bin:/bin',
    }

    file { '/usr/local/bin/puppet-postrun':
        owner => root, group => root, mode => '0555',
        source => "puppet:///modules/master/usr/local/bin/puppet-postrun"
    }
}

# define master::common::puppet::userenv
# ======================================
#
# Set up a Puppet user environment directory
define master::common::puppet::userenv (
    $envpath = $master::common::puppet::environmentpath,
){
    include master::common::puppet

    file { "${envpath}/${name}":
        ensure  => directory,
        owner   => undef,
        group   => puppet,
        mode    => '2750',
        require => File[$envpath],
    }

    exec { "chown-${envpath}/${name}":
        path    => '/bin:/usr/bin',
        cwd     => $envpath,
        command => "chown ${name} ${envpath}/${name}",
        require => File["${envpath}/${name}"],
        onlyif  => "id ${name}",
    }
}
