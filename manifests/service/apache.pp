#
# class master::service::apache
# =============================
#
# Sets up an Apache webserver with either sane defaults, or the values
# specified in files in dist.
#
# The default SSL certs are the autogenerated snakeoil certs -- you
# probably want to define valid ones for every node, or set an
# organization-wide default in Hiera
#
# Note that this currently manages /etc/php5/apache2/php.ini whether
# or not the PHP module is installed.
#

class master::service::apache (
    # Parameters
    # ----------
    #
    # ### servername
    # ### serveraliases
    # ### docroot
    # Default server name, aliases, and document root for non-ssl
    # virtual hosting if site 'default' is used
    $servername = $::fqdn,
    $serveraliases = [],
    $docroot = '/var/www/',

    # ### docroot_ssl
    # Document root for the default SSL site if site 'default-ssl' is used
    $docroot_ssl = '/var/www/',

    # ### configfiles
    # Specify a hash of master::apache_config parameters to
    # generate arbitrary configuration file entries fed by
    # templates from arbitrary modules, e.g.
    #
    #     master::service::apache::configfiles:
    #       appconfig:
    #         enable: false
    #         template: mymodule/etc/apache2/conf-available/appconfig.erb
    #
    # Do not put '.conf' in the name of the config file (it will be
    # automatically appended)
    $configfiles = false,

    # ### enable_modules
    # Default modules to be enabled on Apache
    $enable_modules = [ 'alias', 'headers', 'mime', 'rewrite', 'ssl' ],

    # ### force_https
    # Force all HTTP connections to redirect to HTTPS?
    $force_https = false,

    # ### install_modules
    # Modules packages that need to be installed (this gets forwarded to
    # master::service::apache::packages)
    $install_modules = [ ],

    # ### mpm
    # Only valid for Apache 2.4 servers -- 2.2 will always get prefork
    # with this class
    #
    # Valid values are 'prefork', 'worker', or 'event'
    $mpm = 'prefork',


    # ### prefork_start_servers
    # ### prefork_min_spare_servers
    # ### prefork_max_spare_servers
    # ### prefork_max_request_workers
    # ### prefork_max_connections_per_child
    # Load tuning
    $prefork_start_servers             = '5',
    $prefork_min_spare_servers         = '5',
    $prefork_max_spare_servers         = '10',
    $prefork_max_request_workers       = '150',
    $prefork_max_connections_per_child = '0',

    # ### worker_start_servers
    # ### worker_min_spare_threads
    # ### worker_max_spare_threads
    # ### worker_thread_limit
    # ### worker_threads_per_child
    # ### worker_max_request_workers
    # ### worker_max_connections_per_child
    # worker_* values are also used for the event MPM
    $worker_start_servers              = '2',
    $worker_min_spare_threads          = '25',
    $worker_max_spare_threads          = '75',
    $worker_thread_limit               = '64',
    $worker_threads_per_child          = '25',
    $worker_max_request_workers        = '150',
    $worker_max_connections_per_child  = '0',

    # ### log_dir
    # Location of apache log files
    $log_dir = $::osfamily ? {
        'RedHat' => '/var/log/httpd',
        'Debian' => '/var/log/apache2',
        'SuSE'   => '/var/log/httpd',
        default  => '/var/log/httpd',
    },

    # ### access_log
    # ### error_log
    # Access and error logs for the default site
    $access_log = 'access.log',
    $error_log = 'error.log',

    # ### ssl_access_log
    # Set this to access.log to combine SSL and non-SSL logs
    $ssl_access_log = 'ssl_access.log',

    # ### hostname_lookups
    # Turn this on to log the full hostnames of clients instead of
    # just the IP addresses.
    #
    # WARNING: this results in AT LEAST one DNS request per client
    # request.  DO NOT ENABLE without also running a caching
    # nameserver, and expect performance impacts!
    $hostname_lookups = false,

    # ### timeout
    # Number of seconds before receives and sends time out
    $timeout = '300',

    # ### webmasters
    # You probably want to replace this in the node definition with
    #   webmasters => [ $admin1, $admin2, $admin3 ]
    # (or however many admins are defined for a node)
    $webmasters = [ 'webmaster' ],


    # ### php_default_charset
    # ### php_default_socket_timeout
    # ### php_display_errors
    # ### php_display_startup_errors
    # ### php_max_execution_time
    # ### php_max_file_uploads
    # ### php_max_input_time
    # ### php_memory_limit
    # ### php_output_buffering
    # ### php_post_max_size
    # ### php_upload_max_filesize
    # PHP settings
    $php_default_charset        = false,
    $php_default_socket_timeout = '60',
    $php_display_errors         = 'Off',
    $php_display_startup_errors = 'Off',
    $php_max_execution_time     = '30',
    $php_max_file_uploads       = '20',
    $php_max_input_time         = '60',
    $php_memory_limit           = '128M',
    $php_output_buffering       = '4096',
    $php_post_max_size          = '8M',
    $php_upload_max_filesize    = '2M',

    # ### serveradmin
    # Default server admin e-mail
    $serveradmin = "webmaster@${::domain}",

    # ### sites
    # Sites files to be enabled on Apache
    # In Apache 2.4+, the values in this array will automatically have
    # '.conf' appended.
    $sites = [ 'default', 'default-ssl' ],

    # ### sslvirtualhosts
    # Enable NameVirtualHost *:443 for SSL connections?
    $sslvirtualhosts = false,

    # ### sslcert
    # ### sslchain
    # ### sslkey
    # SSL certificate, CA certificate chain, and certificate key files
    $sslcert = hiera('master::common::ssl::cert_file',$::osfamily ? {
        'Debian' => '/etc/ssl/certs/ssl-cert-snakeoil.pem',
        'RedHat' => '/etc/pki/tls/certs/localhost.crt',
        default  => '/etc/pki/tls/certs/localhost.crt',
    }
    ),
    $sslchain = false,
    $sslkey = hiera('master::common::ssl::key_file',$::osfamily ? {
        'Debian' => '/etc/ssl/private/ssl-cert-snakeoil.key',
        'RedHat' => '/etc/pki/tls/private/localhost.key',
        default  => '/etc/pki/tls/private/localhost.key',
    }
    ),

    # ###sslcapath
    # ###sslcafile
    # SSLCACertificatePath and SSLCACertificateFile respectively, used
    # to authenticate client-side certificates
    $sslcapath = undef,
    $sslcafile = undef,

    # ### sslciphersuite
    # Allowed SSL cipher suite
    #
    # If support is needed for clients lacking ECDSA and SHA256, the
    # following string may be of use:
    #
    #     'HIGH:!ADH:-kEDH:!kRSA:!MD5:-SHA1:!DSS:ECDHE-RSA-AES128-SHA'
    #
    # If this is done, sslhonorcipherorder also needs to be set to true
    #
    $sslciphersuite = 'HIGH:!ADH:-kEDH:!kRSA:!MD5:-SHA1:!DSS',

    # ### sslhonorcipherorder
    # Force clients to use the first cipher in the list that they
    # support?  This value is irrelevant with the default
    # sslciphersuite, but should be turned on if weak ciphers are
    # appended or a cipher list is manually specified.
    $sslhonorcipherorder = false,

    # ### sslprotocol
    # Allowed SSL protocols
    $sslprotocol = 'all -SSLv2 -SSLv3 -TLSv1',

    # ### sslstrictsni
    # ### ssloptions
    # Additional SSL options
    $sslstrictsni = true,
    $ssloptions = false,

    # ### sslpassphrasedialog
    # SSL pass phrase gathering tool (2.4+ only)
    $sslpassphrasedialog = $::osfamily ? {
        'Debian' => 'exec:/usr/share/apache2/ask-for-passphrase',
        'RedHat' => 'exec:/usr/libexec/httpd-ssl-pass-dialog',
        default  => 'builtin',
    },

    # ## Additional security parameters
    # ### hsts
    # $hsts sets the HTTP Strict Transport Security max-age (default 1 year)
    # Set to false to completely disable
    # This setting only has effect if mod_headers is enabled
    $hsts = '31536000',

    # ### ocsp_stapling
    # OCSP Stapling (valid for 2.4+ only)
    $ocsp_stapling = false,

    # ### servertokens
    # $servertokens configures what you return as the Server HTTP
    # response header
    # Set to one of:  Full | OS | Minimal | Minor | Major | Prod
    $servertokens = 'Prod',

    # ### serversignature
    # $serversignature adds a line line containing the server version
    # and virtual host name to server-generated pages
    # Set to "EMail" to also include a mailto: link to the ServerAdmin.
    # Set to one of:  On | Off | EMail
    $serversignature = 'Off'
)
{
    # ## Code Comments
    include master::common::ssl
    include master::service::apache::dirs
    require master::service::apache::packages

    # Autodetect Apache variables based on OS release
    case $::operatingsystem {
        'centos','redhat': {
            if versioncmp($::operatingsystemrelease, '7.0') < 0 {
                $apacheversion = '2.2'
            }
            else {
                $apacheversion = '2.4'
            }
            $apacheenvfile = '/etc/sysconfig/httpd'
            $apacheuser = 'apache'
            $apachegroup = 'apache'
            $apache22pidfile = "/var/run/httpd/httpd.pid"
            $apacheservice = 'httpd'
        }
        'debian': {
            if versioncmp($::operatingsystemrelease, '8.0') < 0 {
                $apacheversion = '2.2'
            }
            else {
                $apacheversion = '2.4'
            }
            $apacheenvfile = '/etc/apache2/envvars'
            $apacheuser = 'www-data'
            $apachegroup = 'www-data'
            $apacheservice = 'apache2'
            $apache22pidfile = '/var/run/apache2.pid'
        }
        'sles': {
            $apacheversion = '2.2'
            $apacheenvfile = '/etc/sysconfig/httpd'
            $apacheuser = 'wwwrun'
            $apachegroup = 'www'
            $apacheservice = 'httpd'
            $apache22pidfile = '/var/run/httpd/httpd.pid'
        }
        default: {
            # Possibly we should just fail outright here, but assuming old
            # CentOS derivative instead.
            $apacheversion = '2.2'
            $apacheenvfile = '/etc/sysconfig/httpd'
            $apacheuser = 'apache'
            $apachegroup = 'apache'
            $apacheservice = 'httpd'
            $apache22pidfile = '/var/run/httpd/httpd.pid'
        }
    }
    $apachelockdir = "/var/lock/${apacheservice}"
    $apachelogdir = "/var/log/${apacheservice}"
    $apacherundir = "/var/run/${apacheservice}"

    file { $apachelockdir:
        ensure  => directory,
        owner   => $apacheuser,
        group   => 'root',
        mode    => '0755',
        require => Package['apache'],
    }

    if nodefile_exists('/etc/apache2/sites-available') {
        nodefile { '/etc/apache2/sites-available':
            defaultensure => 'ignore',
            owner         => 'root',
            group         => 'root',
            mode          => '0644',
            recurse       => true,
            notify => Exec['apache2-reload'],
        }
    }
    else {
        file { '/etc/apache2/sites-available': ensure => directory,
            owner => 'root', group => 'root', mode => '0644',
        }
        if versioncmp($apacheversion, '2.4') < 0 {
            templatelayer { '/etc/apache2/sites-available/default': }
            templatelayer { '/etc/apache2/sites-available/default-ssl': }
        }
        else {
            templatelayer { '/etc/apache2/sites-available/default.conf': }
            templatelayer { '/etc/apache2/sites-available/default-ssl.conf': }
        }
    }

    # Default configuration directories changed with Apache 2.4
    #
    # We stick to the Debian standard for these, plus we add two
    # special cases, for SSL-only and no-SSL-only configuration files
    if versioncmp($apacheversion, '2.4') < 0 {
        file { '/etc/apache2/conf.d':
            ensure  => directory,
            owner   => root, group => root, mode => '0755',
            require => File['/etc/apache2']
        }
        templatelayer { '/etc/apache2/conf.d/security': }
        templatelayer { '/etc/apache2/conf.d/serverpool': }
    }
    else {
        file { [ '/etc/apache2/conf-available',
                 '/etc/apache2/conf-enabled',
                 ]:
            ensure  => directory,
            owner   => root, group => root, mode => '0755',
            require => File['/etc/apache2']
        }
        file { '/etc/apache2/conf.d/security': ensure => absent }
        templatelayer { '/etc/apache2/conf-available/security.conf': }
        file { '/etc/apache2/conf-enabled/security.conf':
            ensure => link,
            target => '../conf-available/security.conf',
        }
        # Apache 2.2 serverpool settings configured from
        # mods-available/mpm_*.conf in Apache 2.4
        templatelayer { '/etc/apache2/mods-available/mpm_event.conf': }
        templatelayer { '/etc/apache2/mods-available/mpm_event.load': }
        templatelayer { '/etc/apache2/mods-available/mpm_prefork.conf': }
        templatelayer { '/etc/apache2/mods-available/mpm_prefork.load': }
        templatelayer { '/etc/apache2/mods-available/mpm_worker.conf': }
        templatelayer { '/etc/apache2/mods-available/mpm_worker.load': }
    }

    # conf.d-nossl and conf.d-ssl will copy all nodefiles recursively
    # if present, otherwise be created empty to support standard
    # templates
    if nodefile_exists('/etc/apache2/conf.d-nossl') {
        nodefile { '/etc/apache2/conf.d-nossl':
            recurse => true,
            require => File['/etc/apache2'],
        }
    }
    else {
        file { '/etc/apache2/conf.d-nossl': ensure => directory,
            owner   => root, group => root, mode => '0755',
            purge   => true,
            recurse => true,
            require => File['/etc/apache2'],
        }
    }
    if nodefile_exists('/etc/apache2/conf.d-ssl') {
        nodefile { '/etc/apache2/conf.d-ssl':
            recurse => true,
            require => File['/etc/apache2'],
        }
    }
    else {
        file { '/etc/apache2/conf.d-ssl': ensure => directory,
            owner   => root, group => root, mode => '0755',
            purge   => true,
            recurse => true,
            require => File['/etc/apache2'],
        }
    }

    # Parameter-based general configuration files
    if $configfiles {
        if is_hash($configfiles) {
            create_resources(master::apache_config,$configfiles)
        }
        else {
            notify { "${title}-configfiles-not-hash":
                message => "WARNING: master::service::apache::configfiles is not a hash!",
                loglevel => warning,
            }
        }
    }

    if $force_https {
        templatelayer { '/etc/apache2/conf.d-nossl/force_https.conf':
            notify  => Exec['apache2-reload'],
            require => File['/etc/apache2/conf.d-nossl'],
        }
    }

    # MPM configuration (only valid for Apache 2.4 systems)
    if versioncmp($apacheversion, '2.4') >= 0 {
        case $mpm {
            'prefork': {
                apache2_disable_module { 'mpm_event': }
                apache2_enable_module  { 'mpm_prefork': }
                apache2_disable_module { 'mpm_worker': }
            }
            'worker': {
                apache2_disable_module { 'mpm_event': }
                apache2_disable_module { 'mpm_prefork': }
                apache2_enable_module  { 'mpm_worker': }

            }
            'event': {
                apache2_enable_module  { 'mpm_event': }
                apache2_disable_module { 'mpm_prefork': }
                apache2_disable_module { 'mpm_worker': }
            }
            default: {
                fail("Unknown MPM type: ${mpm}")
            }
        }
    }

    # PHP configuration
    file { '/etc/php5': ensure => directory,
        owner => root, group => root, mode => '0755',
    }
    file { '/etc/php5/apache2': ensure => directory,
        owner => root, group => root, mode => '0755',
        require => File['/etc/php5']
    }
    if nodefile_exists('/etc/apache2/ssl') {
        nodefile { '/etc/apache2/ssl':
            defaultensure => 'ignore',
            owner         => 'root',
            group         => 'root',
            mode          => '0644',
            recurse       => true,
            notify        => Exec['apache2-reload']
        }
    }
    else {
        file { '/etc/apache2/ssl': ensure => directory,
            owner => 'root', group => 'root', mode => '0644',
        }
    }

    Templatelayer { notify => Exec['apache2-reload'] }
    case $::osfamily {
        'RedHat': {
            # These locations are not default to CentOS, but Debian
            templatelayer { '/etc/apache2/apache2.conf':
                suffix  => $apacheversion,
                require => File['/etc/apache2'],
            }
            templatelayer { '/etc/apache2/ports.conf':
                suffix  => $apacheversion,
                require => File['/etc/apache2'],
            }

            # This is the default CentOS configuration file, symlinked
            # back to the managed file
            file { '/etc/httpd/conf/httpd.conf':
                ensure => link,
                target => '../apache2.conf',
            }
            # CentOS 7 enables mod_mime by default which unconfigured
            # looks for the mime.types file in the wrong place.  This
            # symlink ensures that httpd will always start.
            file { '/etc/httpd/conf/mime.types':
                ensure => link,
                target => '/etc/mime.types',
            }
            templatelayer { '/etc/sysconfig/httpd': }

            if versioncmp($::operatingsystemrelease, '7.0') < 0 {
                # The list of default modules to load was factored out of
                # the httpd.conf and into this load file
                # TODO: Redo this into individual load files
                templatelayer { '/etc/apache2/mods-enabled/00-default.load': }
            }
            templatelayer { '/etc/apache2/mods-available/mime.load': }
            templatelayer { '/etc/apache2/mods-available/rewrite.load': }
            templatelayer { '/etc/apache2/mods-available/proxy.load': }
            templatelayer { '/etc/apache2/mods-available/proxy_balancer.load': }
            templatelayer { '/etc/apache2/mods-available/proxy_ftp.load': }
            templatelayer { '/etc/apache2/mods-available/proxy_http.load': }
            templatelayer { '/etc/apache2/mods-available/proxy_ajp.load': }
            templatelayer { '/etc/apache2/mods-available/proxy_connect.load': }
            templatelayer { '/etc/apache2/mods-available/alias.load': }
            templatelayer { '/etc/apache2/mods-available/unique_id.load': }
        }
        'Debian': {
            templatelayer { '/etc/apache2/apache2.conf':
                suffix => $apacheversion,
            }
            templatelayer { '/etc/apache2/ports.conf':
                suffix => $apacheversion,
            }
        }
        'Suse': {
            # These locations are not default to SuSE, but Debian
            templatelayer { '/etc/apache2/apache2.conf':
                suffix  => $apacheversion,
                require => File['/etc/apache2'],
            }
            templatelayer { '/etc/apache2/ports.conf':
                suffix  => $apacheversion,
                require => File['/etc/apache2'],
            }

            # This is the default SuSE configuration file, symlinked
            # back to the managed file
            file { '/etc/apache2/httpd.conf':
                ensure => link,
                target => 'apache2.conf',
            }
        }
    }

    # Module configuration files.
    # With the exception of SSL, load files are only generated for CentOS
    templatelayer { '/etc/apache2/mods-available/actions.conf': }
    templatelayer { '/etc/apache2/mods-available/alias.conf':
        suffix => $apacheversion,
    }
    templatelayer { '/etc/apache2/mods-available/autoindex.conf': }
    templatelayer { '/etc/apache2/mods-available/cgid.conf': }
    templatelayer { '/etc/apache2/mods-available/info.conf':
        suffix => $apacheversion,
    }
    templatelayer { '/etc/apache2/mods-available/mime.conf':
        suffix => $apacheversion,
    }
    templatelayer { '/etc/apache2/mods-available/negotiation.conf': }
    templatelayer { '/etc/apache2/mods-available/php5.conf': }
    templatelayer { '/etc/apache2/mods-available/setenvif.conf': }
    templatelayer { '/etc/apache2/mods-available/ssl.load': }
    templatelayer { '/etc/apache2/mods-available/ssl.conf':
        suffix => $apacheversion,
    }
    templatelayer { '/etc/apache2/mods-available/status.conf':
        suffix => $apacheversion,
    }


    file { '/etc/apache2/conf.d/README':
        ensure => absent,
    }

    templatelayer { '/etc/php5/apache2/php.ini': }

    if $enable_modules {
        apache2_enable_module { $enable_modules:
            require => Class['master::service::apache::packages']
        }
    }

    if $sites {
        if versioncmp($apacheversion, '2.4') < 0 {
            apache2_enable_site { $sites: }
        }
        else {
            apache2_enable_site { $sites: suffix => '.conf' }
        }
    }

    service { 'httpd':
        ensure     => running,
        name       => $apacheservice,
        enable     => true,
        hasrestart => true,
        require    => [ Class['master::common::ssl'],
                        Class['master::service::apache::dirs'],
                        ],
    }

    exec { 'apache2-reload':
        alias       => 'apache2-graceful',
        command     => "service ${apacheservice} restart ; sleep 1",
        path        => '/bin:/usr/bin:/sbin:/usr/sbin',
        refreshonly => true,
        require     => Service['httpd'],
    }

    exec { 'apache2-restart':
        command     => "service ${apacheservice} restart; sleep 3",
        path        => '/bin:/usr/bin:/sbin:/usr/sbin',
        refreshonly => true,
        require     => Service['httpd'],
    }

    master::nagios_check { '20_Proc_apache': }
}

define apache2_disable_module {
    # Ensure that the specified module is removed from the
    # mods-enabled directory

    file { "/etc/httpd/mods-enabled/${title}.load":
        ensure => absent,
        notify => Exec['apache2-restart'],
    }
    file { "/etc/httpd/mods-enabled/${title}.conf":
        ensure => absent,
        notify => Exec['apache2-restart'],
    }
}

define apache2_enable_module {
    case $::operatingsystem {
        'centos','redhat': {
            # Since we are using the split load/conf syntax for both
            # Debian and CentOS, if a conf file exists in
            # mods-available, we must under CentOS REMOVE the old file
            # in conf.d to prevent duplicate loading and also always
            # define a load file.
            if template_exists('master',"/etc/apache2/mods-available/${title}.load") {
                file { "/etc/httpd/conf.d/${title}.conf":
                    ensure => absent,
                    require => File["/etc/httpd/mods-enabled/${title}.load"],
                }
                file { "/etc/httpd/mods-enabled/${title}.load":
                    ensure => link,
                    target => "../mods-available/${title}.load",
                    require => File['/etc/httpd/mods-enabled'],
                }
            }
            if template_exists('master',"/etc/apache2/mods-available/${title}.conf") {
                file { "/etc/httpd/mods-enabled/${title}.conf":
                    ensure => link,
                    target => "../mods-available/${title}.conf",
                }
            }
        }
        'debian','ubuntu': {
            exec { "a2enmod-${title}":
                command => "a2enmod ${title}",
                path    => "/bin:/usr/bin:/usr/sbin",
                creates => "/etc/apache2/mods-enabled/${title}.load",
                notify  => Exec['apache2-restart'],
                require => Class['master::service::apache::packages'],
            }
        }
        default: {
            notify { "a2enmod-undefined-${title}":
                message  => "WARNING: I don't know how to enable ${title} for ${::operatingsystem}!  You will have to do it by hand.",
                loglevel => warning,
            }
        }
    }
}

define apache2_enable_site ( $suffix = '' ) {
    # Remove any existing suffix from target before re-adding it, to
    # prevent doubled suffixes
    $site_base = regsubst($title,"(.*?)${suffix}",'\1')
    $site = "${site_base}${suffix}"

    file { "/etc/apache2/sites-enabled/${site}":
        ensure => "../sites-available/${site}",
        notify => Exec["apache2-reload"]
    }
}
