# PAM configuration for the Secure Shell service

<% if @sshd_deny_root or @sshd_deny_users or @sshd_deny_users_templates -%>
# Use pam_listfile to deny users specified in /etc/ssh/deny.users
auth requisite pam_listfile.so item=user sense=deny file=/etc/ssh/deny.users onerr=succeed

<% end -%>
<% if @sshd_succeed_if -%>
<%   if @sshd_succeed_if.respond_to?('each') -%>
<%     @sshd_succeed_if.each do |args| -%>
auth requisite pam_succeed_if.so <%= args %>
<%     end -%>
<%   else -%>
auth requisite pam_succeed_if.so <%= @sshd_succeed_if %>
<%   end -%>

<% end -%>
<% if @radius.respond_to?('[]') and @radius['sshd'] and @radius['shared_secret'] -%>
<%   if @radius['prompt'] -%>
# Require RADIUS authentication before all others (prompt requires >= v1.4)
auth requisite pam_radius_auth.so prompt=<%= @radius['prompt'] %>

<%   else -%>
# Require RADIUS authentication before all others
auth requisite pam_radius_auth.so

<%   end -%>
<% end -%>
# Standard Un*x authentication.
@include common-auth

# Disallow non-root logins when /etc/nologin exists.
account    required     pam_nologin.so

<% if @access_sshd -%>
# Edit /etc/security/access.conf to set access limits.
# (Replaces /etc/login.access file)
account  required       pam_access.so

<% else -%>
# Uncomment and edit /etc/security/access.conf if you need to
# set access limits.
# (Replaces /etc/login.access file)
# account  required       pam_access.so

<% end -%>
# Standard Un*x authorization.
@include common-account

# SELinux needs to be the first session rule.  This ensures that any
# lingering context has been cleared.  Without this it is possible that a
# module could execute code in the wrong domain.
session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so close

# Set the loginuid process attribute.
session    required     pam_loginuid.so

# Create a new session keyring.
session    optional     pam_keyinit.so force revoke

# Standard Un*x session setup and teardown.
@include common-session

<% if @script.respond_to?('[]') and @script['sshd'] -%>
# Dynamic script support
session    required     pam_script.so dir=<%= @script['sshd'] %>

<% end -%>
# Print the message of the day upon successful login.
# This includes a dynamically generated part from /run/motd.dynamic
# and a static (admin-editable) part from /etc/motd.
session    optional     pam_motd.so  motd=/run/motd.dynamic
session    optional     pam_motd.so noupdate

# Print the status of the user's mailbox upon successful login.
session    optional     pam_mail.so standard noenv # [1]

# Set up user limits from /etc/security/limits.conf.
session    required     pam_limits.so

# Read environment variables from /etc/environment and
# /etc/security/pam_env.conf.
session    required     pam_env.so # [1]
# In Debian 4.0 (etch), locale-related environment variables were moved to
# /etc/default/locale, so read that as well.
session    required     pam_env.so user_readenv=1 envfile=/etc/default/locale

# SELinux needs to intervene at login time to ensure that the process starts
# in the proper default security context.  Only sessions which are intended
# to run in the user's context should be run after this.
session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so open

# Standard Un*x password updating.
@include common-password
